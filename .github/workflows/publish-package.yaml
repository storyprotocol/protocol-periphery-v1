name: Publish to npm, Tag and create GH Release

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (no actual publishing)'
        type: boolean
        default: false
        required: false

permissions:
  contents: write
  actions: write

jobs:
  timestamp:
    uses: storyprotocol/gha-workflows/.github/workflows/reusable-timestamp.yml@main

  print_version_to_publish:
    needs: [timestamp]
    runs-on: ubuntu-latest
    outputs:
      PERIPHERY_VERSION_TO_BE_PUBLISHED: ${{ steps.get_version_to_publish.outputs.PERIPHERY_VERSION_TO_BE_PUBLISHED }}
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Get version to publish
        id: get_version_to_publish
        run: |
          content=$(cat package.json)
          echo "PERIPHERY_VERSION_TO_BE_PUBLISHED=$(echo $content | jq -r '.version')" >> $GITHUB_OUTPUT

  # Fetch the latest version from NPM
  fetch_latest_version:
    needs: [timestamp, print_version_to_publish]
    runs-on: ubuntu-latest
    outputs:
      PERIPHERY_LATEST_VERSION: ${{ steps.get_latest_version.outputs.PERIPHERY_LATEST_VERSION }}
    steps:
      - name: Get latest package version
        id: get_latest_version
        run: |
          PERIPHERY_LATEST_VERSION=$(npm view @story-protocol/protocol-periphery version --silent)
          echo "Latest version of @story-protocol/protocol-periphery on NPMJS is $PERIPHERY_LATEST_VERSION"
          echo "PERIPHERY_LATEST_VERSION=$PERIPHERY_LATEST_VERSION" >> $GITHUB_OUTPUT

  # Fail the PR if the version to be published is the same as the latest version on NPM
  fail_if_version_is_same:
    needs: [print_version_to_publish, fetch_latest_version]
    runs-on: ubuntu-latest
    outputs:
      IS_PUBLISH_PERIPHERY: ${{ steps.check_publish_condition.outputs.IS_PUBLISH_PERIPHERY }}
    steps:
      - name: check publish condition
        id: check_publish_condition
        run: |
          PERIPHERY_LATEST_VERSION="${{ needs.fetch_latest_version.outputs.PERIPHERY_LATEST_VERSION }}"
          PERIPHERY_VERSION_TO_BE_PUBLISHED="${{ needs.print_version_to_publish.outputs.PERIPHERY_VERSION_TO_BE_PUBLISHED }}"

          IS_PUBLISH_PERIPHERY=false

          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Version check - Latest NPM version: $PERIPHERY_LATEST_VERSION, Version to publish: $PERIPHERY_VERSION_TO_BE_PUBLISHED"
            if [ "$PERIPHERY_LATEST_VERSION" == "$PERIPHERY_VERSION_TO_BE_PUBLISHED" ]; then
              echo "DRY RUN: The version to be published is the same as the latest version on NPM."
              echo "DRY RUN: In a real run, this would fail the workflow."
            else
              IS_PUBLISH_PERIPHERY=true
              echo "DRY RUN: Version check passed. Would proceed with publishing."
            fi
          else
            if [ "$PERIPHERY_LATEST_VERSION" == "$PERIPHERY_VERSION_TO_BE_PUBLISHED" ]; then
              echo "The @story-protocol/protocol-periphery version to be published is the same as the latest version on NPM."
              exit 1
            else
              IS_PUBLISH_PERIPHERY=true
            fi
          fi

          echo "IS_PUBLISH_PERIPHERY=$IS_PUBLISH_PERIPHERY" >> $GITHUB_OUTPUT

  fetch_last_tag:
    needs: [fail_if_version_is_same]
    if: ${{ needs.fail_if_version_is_same.outputs.IS_PUBLISH_PERIPHERY == 'true' && github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    outputs:
      PERIPHERY_LATEST_TAG: ${{ steps.get_last_tag.outputs.PERIPHERY_LATEST_TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Get last tag
        id: get_last_tag
        run: |
          git fetch --tags
          PERIPHERY_LATEST_TAG=$(git tag --sort=creatordate | grep -E "@story-protocol/protocol-periphery|protocol-periphery|^v[0-9]" | tail -n1)
          echo "PERIPHERY_LATEST_TAG=$PERIPHERY_LATEST_TAG" >> $GITHUB_OUTPUT
          
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Last tag for @story-protocol/protocol-periphery is $PERIPHERY_LATEST_TAG"
            echo "DRY RUN: Would create new tag @story-protocol/protocol-periphery@${{ needs.print_version_to_publish.outputs.PERIPHERY_VERSION_TO_BE_PUBLISHED }}"
          else
            echo "Last tag for @story-protocol/protocol-periphery is $PERIPHERY_LATEST_TAG"
          fi

  create_release:
    needs: [print_version_to_publish, build-test-publish]
    if: ${{ needs.fail_if_version_is_same.outputs.IS_PUBLISH_PERIPHERY == 'true' && github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        
      - name: Create Release (Dry Run)
        id: dry_run_release
        if: ${{ github.event.inputs.dry_run == 'true' }}
        run: |
          PERIPHERY_VERSION_TO_BE_PUBLISHED="${{ needs.print_version_to_publish.outputs.PERIPHERY_VERSION_TO_BE_PUBLISHED }}"
          releaseTag="@story-protocol/protocol-periphery@${PERIPHERY_VERSION_TO_BE_PUBLISHED}"
          echo "DRY RUN: Would create GitHub release with tag: ${releaseTag}"
          echo "DRY RUN: Would set release name to: ${releaseTag}"
          echo "DRY RUN: Would set release body to: Release of @story-protocol/protocol-periphery version ${PERIPHERY_VERSION_TO_BE_PUBLISHED}"

      - name: Create Release
        id: create_release
        if: ${{ github.event.inputs.dry_run != 'true' }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { PERIPHERY_VERSION_TO_BE_PUBLISHED } = process.env
            
            const releaseTag = `@story-protocol/protocol-periphery@${PERIPHERY_VERSION_TO_BE_PUBLISHED}`
            
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: releaseTag,
              name: releaseTag,
              body: `Release of @story-protocol/protocol-periphery version ${PERIPHERY_VERSION_TO_BE_PUBLISHED}`,
              draft: false,
              prerelease: false
            })
            
            return release.data
        env:
          PERIPHERY_VERSION_TO_BE_PUBLISHED: ${{ needs.print_version_to_publish.outputs.PERIPHERY_VERSION_TO_BE_PUBLISHED }}

  build-test-publish:
    needs: [fail_if_version_is_same, fetch_last_tag]
    if: ${{ needs.fail_if_version_is_same.outputs.IS_PUBLISH_PERIPHERY == 'true' && github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.dry_run != 'true' && 'odyssey' || '' }}
    env:
      WALLET_PRIVATE_KEY: ${{ secrets.WALLET_PRIVATE_KEY }}
      TEST_WALLET_ADDRESS: ${{ secrets.TEST_WALLET_ADDRESS }}
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Setup Node.js environment
        uses: actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8 # v4.0.1
        with:
          node-version: 20.0.0
          cache: 'yarn'
          registry-url: https://registry.npmjs.org/

      - name: Install dependencies
        run: yarn install

      - name: Run tests
        run: yarn test

      - name: Publish protocol-periphery package to npm
        if: ${{ github.event_name == 'workflow_dispatch' && needs.fail_if_version_is_same.outputs.IS_PUBLISH_PERIPHERY == 'true'}}
        run: |
            if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
              echo "DRY RUN: Would publish @story-protocol/protocol-periphery version ${{ needs.print_version_to_publish.outputs.PERIPHERY_VERSION_TO_BE_PUBLISHED }} to NPM"
              npm publish --dry-run --access public
            else
              npm publish --access public
            fi
        env:
            NODE_AUTH_TOKEN: ${{ secrets.NPM_PERIPHERY_TOKEN }}